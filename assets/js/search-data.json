{
  
    
        "post0": {
            "title": "Matt Triano's Fastpages Blog Setup Post",
            "content": "Steps to set up a FastPages blog . Here are the official setup instructions. I&#39;ll include my instructions as my particular usecase involved some extra steps which aren&#39;t documented too well. My usecase involved: . Using a custom domain. | Accounting for the fact that I already have another GitHub Pages site. (Ultimately and surprisingly, I found no extra steps were needed for this part). | . (official step 1): Create a copy of the template repo via this link. Fill in the repo name, description, and select Public or Private if that option&#39;s open to you. (I don&#39;t know if Private will work; I used Public). | Click Create repository from template. | | (official step 2, in your repo): Wait about 30 seconds for the repo&#39;s Actions to run. After they complete, you&#39;ll see a Pull Request that should be named Initial Setup (or similar). Open that Pull Request up. Create an ssh key-pair. The PR links to some unfamiliar website that will generate keys for you, which I found rather sketchy (for my reasons, see this page&#39;s footnote) and I would advise against using a service like that. Even though my blog test is a low-to-no-value asset, I can just generate a key on my machine and not violate a core rule of safe computing: &quot;KEEP YOUR PRIVATE KEY SECURE&quot;. (On a linux or unix machine): Create your key-pair: Open up a terminal and create a spot for assorted secrets. | ~$ mkdir .your_secrets &amp;&amp; cd .your_secrets | ~/.your_secrets$ mkdir fastpages &amp;&amp; cd fastpages | ~/.your_secrets/fastpages$ ssh-keygen -t rsa -b 4096 -C &quot;your.email@email.com&quot; which will generate the pair and ask where you want to save it. Type id_rsa, and leave the passcode part blank, | | (In your repo on GitHub): Enter your private key as a Repo secret Open the private key (the file that doesn&#39;t end in .pub) you made earlier in a text editor, | (In your repo&#39;s Settings &gt; Secrets section): click New repository secret, | Enter &quot;SSH_DEPLOY_KEY&quot; into the Name field, | Copy your private key (including the &quot;BEGIN RSA PRIVATE KEY&quot; and &quot;END RSA PRIVATE KEY&quot; parts) into the Value field, | Click Add secret. | | (In your repo on GitHub): Enter your public key as a Deploy key Open the public key (the file that ends in .pub) you made earlier in a text editor, | (In your repo&#39;s Settings &gt; Deploy keys section): click add deploy key, | Enter whatever you want into the Title field, | Copy your public key (including the &quot;ssh-rsa &quot; part at the beginning and &quot;your.email@email.com&quot; part at the end) into the Value field, | Click Add key. | | | Setting up a custom domain: (In your repo&#39;s Settings &gt; Pages section) Add name of your Custom domain (e.g. matttriano.dev) to the Custom domain field and click Save, | (Via your domain registration service interface) Go to the site where you bought your domain (I use Google Domains) and pull up the DNS page for the domain you want to use: Add these GitHub IP addresses as custom records with Type = A and Host name left blank 185.199.108.153 | 185.199.109.153 | 185.199.110.153 | 185.199.111.153 | . | Add a record with Type = CNAME and Host name = www that points to your default GitHub Pages URL (&lt;your-github-id&gt;.github.io) Note: It will automatically add a period to the end of .io (I think?) I thought I would have to use something else for the CNAME part as I have another site running that just uses matttriano.github.io (coincidentally using Dean Attali&#39;s beautiful-jekyll template, but Dean Attali&#39;s instructions showed that GitHub Pages is smart enough to use the repo&#39;s CNAME file (which was created step 3B) to figure out how to respond to requests. | . | (Either in a clone the repo to your local machine or through the GitHub interface) Update the url and baseurl settings in the _config.yml file Enter your custom domain for the url (so the line looks like url: &quot;https://matttriano.dev&quot;) | Change the baseurl to be an empty string (ie baseurl: &quot;&quot;) | Commit the change and push it to your repo. | | | | (In your repo on GitHub) Merge your pull request It should take a little time to build, but after a bit you should be able to see your site at your custom domain. You might have to wait up to 30 minutes for DNS servers to be updated with your new info. | (Optional) Require HTTPS for your site When you can see your site (or the error message you get when trying to access it changes), you can tell it to only serve requests using https. For some top level domains (like .dev, or most if not all of Google&#39;s TLDs) (In your GitHub repo&#39;s Settings &gt; Pages section) Click Enforce HTTPS. | | And that&#39;s about everything I had to do to get this site up and running. Writing up this post took far more time. . Why you shouldn&#39;t generate a key-pair using some random site . The point of generating a key-pair is that it enables secure communications as long as your private key really is private. Others that have your public key can confirm messages came from you (you/your machine encrypts the message with your private key and they can decrypt it with your public key), and those others can send you secure messages (they can encrypt the message with your public key and they can only be decrypted with your private key). If you use a website to generate your private key, unless you yourself run that website or know its codebase, it&#39;s possible the website would retain a copy of the private key and they might even be able to connect to your identity from potentially identifying information (like IP address) that you send to the site. .",
            "url": "https://matttriano.dev/jupyter/2021/09/20/Blog-Set-Up.html",
            "relUrl": "/jupyter/2021/09/20/Blog-Set-Up.html",
            "date": " • Sep 20, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://matttriano.dev/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://matttriano.dev/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://matttriano.dev/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://matttriano.dev/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}